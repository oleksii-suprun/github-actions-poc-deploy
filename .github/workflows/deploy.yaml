name: Deploy to Environment

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
  repository_dispatch:
    types:
      - deploy_dev_snapshot
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Input a version (e.g., 1.0.0)'
        required: false

jobs:
  detect_changes:
    name: üîé Detect changes
    runs-on: ubuntu-latest
    outputs:
      changed_envs: ${{ steps.set_env.outputs.env_list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check which environment files have changed
        id: set_env
        run: |
          changed_envs=""
          external_dispatch=""

          if [[ -n "${{ github.event.client_payload.target_verison }}" || -n "${{ github.event.inputs.target_version }}" ]]; then
            external_dispatch="true"
          fi

          if [[ -n $external_dispatch || -n "$(git diff --name-only @~..@ | grep 'state/dev.yaml')" ]]; then
              changed_envs="dev,$changed_envs"
          fi

          if [[ -z $external_dispatch && -n "$(git diff --name-only @~..@ | grep 'state/stage.yaml')" ]]; then
              changed_envs="stage,$changed_envs"
          fi

          if [[ -z $external_dispatch && -n "$(git diff --name-only @~..@ | grep 'state/prod.yaml')" ]]; then
              changed_envs="prod,$changed_envs"
          fi

          changed_envs=$(sed 's/,$//' <<< $changed_envs)
          echo "Changed environments: [$changed_envs"]
          echo "env_list=$(echo "\"$changed_envs\"" | jq -c 'split(",")')" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: ${{ needs.detect_changes.outputs.changed_envs != '[]' && needs.detect_changes.outputs.changed_envs != '' }}
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect_changes.outputs.changed_envs) }}
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: ü©π Patch dev version with client payload if exists
        if: ${{ github.event.client_payload.target_verison }}
        run: yq e -i '.artifact.version = "${{ github.event.client_payload.target_verison }}"' state/dev.yaml

      - name: ü©π Patch dev version with inputs if exists
        if: ${{ github.event.inputs.target_version }}
        run: yq e -i '.artifact.version = "${{ github.event.inputs.target_version }}"' state/dev.yaml

      - name: üéõÔ∏è Set Env Vars
        id: vars
        run: |
          ENV_FILE="state/${{ matrix.environment }}.yaml"
          echo "artifact_version=$(yq e '.artifact.version' $ENV_FILE)" >> "$GITHUB_OUTPUT"
          echo "artifact_repo=$(yq e '.artifact.repo' $ENV_FILE)" >> "$GITHUB_OUTPUT"
          echo "deploy_target=$(yq e '.environment.deploy_target' $ENV_FILE)" >> "$GITHUB_OUTPUT"

      - name: ‚úÖ Check Version
        uses: actions/github-script@v7
        with:
          script: |
            if (!steps.vars.outputs.artifact_version) {
              core.setFailed("Version cannot be empty!");
            }

      - name: ‚öôÔ∏è Configure JFrog CLI
        run: echo "Configuring JFrog"
        # uses: jfrog/setup-jfrog-cli@v4

      - name: ‚è¨ Get artifact
        run: |
          echo "Getting artifact with version `${{ steps.vars.outputs.artifact_version }}` from repository"

      - name: ‚öôÔ∏è Configure AWS Credentials
        run: echo "Configuring AWS"
        # uses: aws-actions/configure-aws-credentials@v4
        # with:
        #   aws-region: ''
        #   role-to-assume: ''
        #   role-session-name: GitHubActions

      - name: üöÄ Deploy artifact
        run: |
          echo "Deploying version `${{ steps.vars.outputs.artifact_version }}` to `${{ matrix.environment }}` environment"

      - name: ‚¨áÔ∏è Checkout main
        if: ${{ matrix.environment }} == 'dev'
        uses: actions/checkout@v4
        with:
          repository: oleksii-suprun/github-actions-poc
          token: ${{ secrets.DEPLOY_REPO_ACTIONS_PAT }}
          sparse-checkout: |
            schema
            infra

      - name: ‚¨áÔ∏è Checkout tag
        if: ${{ matrix.environment }} != 'dev'
        uses: actions/checkout@v4
        with:
          repository: oleksii-suprun/github-actions-poc
          token: ${{ secrets.DEPLOY_REPO_ACTIONS_PAT }}
          ref: v${{ steps.vars.outputs.artifact_version }}
          fetch-tags: true
          sparse-checkout: |
            schema
            infra

      - name: üîÑÔ∏è Apply infra changes
        run: echo "Deploying infra changes - $(cat infra/infra.txt)"

      - name: üîÑÔ∏è Apply schema changes
        run: echo "Deploying infra changes - $(cat schema/schema.txt)"
