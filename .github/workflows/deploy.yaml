name: Deploy to Environment

on:
  push:
    paths-ignore:
      - '.github/**'
  repository_dispatch:
    types:
      - deploy_dev_snapshot
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Input a version (e.g., 1.0.0)'
        required: false

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      changed_envs: ${{ steps.set_env.outputs.env_list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check which environment files have changed
        id: set_env
        run: |
          changed_envs=""
          external_dispatch=""

          if [[ -n "${{ github.event.client_payload.target_verison }}" || -n "${{ github.event.inputs.target_version }}" ]]; then
            external_dispatch="true"
          fi

          if [[ -n $external_dispatch || -n "$(git diff --name-only @~..@ | grep 'state/dev.yaml')" ]]; then
              changed_envs="dev,$changed_envs"
          fi

          if [[ -z $external_dispatch && -n "$(git diff --name-only @~..@ | grep 'state/stage.yaml')" ]]; then
              changed_envs="stage,$changed_envs"
          fi

          if [[ -z $external_dispatch && -n "$(git diff --name-only @~..@ | grep 'state/prod.yaml')" ]]; then
              changed_envs="prod,$changed_envs"
          fi

          changed_envs=$(sed 's/,$//' <<< $changed_envs)
          echo "Changed environments: [$changed_envs"]
          echo "env_list=$(echo "\"$changed_envs\"" | jq -c 'split(",")')" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: ${{ needs.detect_changes.outputs.changed_envs != '[]' && needs.detect_changes.outputs.changed_envs != '' }}
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect_changes.outputs.changed_envs) }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🩹 Patch dev version with client payload if exists
        if: ${{ github.event.client_payload.target_verison }}
        run: yq e -i '.artifact.version = "${{ github.event.client_payload.target_verison }}"' state/dev.yaml

      - name: 🩹 Patch dev version with inputs if exists
        if: ${{ github.event.inputs.target_version }}
        run: yq e -i '.artifact.version = "${{ github.event.inputs.target_version }}"' state/dev.yaml

      - name: 🎛️ Set Env Vars
        run: |
          ENV_FILE="state/${{ matrix.environment }}.yaml"

          echo "ARTIFACT_VERSION=$(yq e '.artifact.version' $ENV_FILE)" >> $GITHUB_ENV
          echo "ARTIFACT_REPO=$(yq e '.artifact.repo' $ENV_FILE)" >> $GITHUB_ENV
          echo "DEPLOY_TARGET=$(yq e '.environment.deploy_target' $ENV_FILE)" >> $GITHUB_ENV

      - name: ✅ Check Version
        uses: actions/github-script@v7
        with:
          script: |
            if (!process.env.ARTIFACT_VERSION) {
              core.setFailed("Version cannot be empty!");
            }

      - name: 🚀 Deploy
        run: echo "Deploying version $ARTIFACT_VERSION to ${{ matrix.environment }} environment"
